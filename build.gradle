plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.9'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
    id 'com.epages.restdocs-api-spec' version '0.18.2'
}

group = 'com.ads.app'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

configurations {
    asciidoctorExt
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


ext {
    snippetsDir = file('src/docs')
}


def var = dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // lombok
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor('org.projectlombok:lombok:1.18.24')
    testCompileOnly('org.projectlombok:lombok:1.18.24')

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.4'
    implementation('org.hibernate:hibernate-validator:8.0.0.Final')

    // apache common lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // google guava
    implementation "com.google.guava:guava:31.1-jre"

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation('org.hibernate:hibernate-validator:8.0.0.Final')

    // query dsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mapstruct
    compileOnly 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // jwt
    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // or 'io.jsonwebtoken:jjwt-gson:0.11.5' for gson

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // cache
    implementation("com.github.ben-manes.caffeine:caffeine:3.1.8")

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // swagger
    implementation "io.springfox:springfox-boot-starter:3.0.0"

    // restdocs-api-spec
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2' //2.2
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

//tasks.withType(JavaCompile) {
//    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
//}

clean.doLast {
    file(querydslDir).deleteDir()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn 'createOpenApi'
}

// docs 초기화
test.doFirst {
    delete file('src/main/resources/static/docs')
}

test.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from files("build/docs/asciidoc", "build/api-spec")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    String profile = System.properties['profile']
    if (['qa', 'local'].contains(profile)) {
        dependsOn copyDocument
    }
}

bootJar.doFirst {
    copy {
        from 'src/main/resources/static/docs'
        into 'build/resources/main/static/docs'
    }
}

tasks.register('createOpenApi', Task) {
    dependsOn 'openapi3'
}

openapi3 {
    server = 'https://localhost:8082'
    title = 'ADS-APP SERVER'
    description = '광고 API 서버 REST API SPEC'
    version = '0.1.0'
    format = 'yaml'

//    delete file('src/main/resources/static/docs')

//    copy {
//        from 'build/api-spec'
//        into 'src/main/resources/static/docs'
//    }
}
